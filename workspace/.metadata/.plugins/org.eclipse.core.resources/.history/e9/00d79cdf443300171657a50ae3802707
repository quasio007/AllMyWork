package dead.lock;

import java.util.Random;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class DeadLockDemo {
	private Accounts act1 = new Accounts();
	private Accounts act2 = new Accounts();
	private Random ran = new Random();
	private Lock lock1 = new ReentrantLock();
	private Lock lock2 = new ReentrantLock();
//	private void acquireLock(Lock firstLock,Lock secondLock){
//		
//	}

	public void thread1Methord() {
	
		lock1.lock();
		System.out.println();
		try {
			Thread.sleep(200);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		lock2.lock();
		for (int i = 0; i < 10000; i++) {
			Accounts.transferMoney(act1, act2, ran.nextInt(1000));
		}
		System.out.println("Completed thread1");
		lock1.unlock();
		lock2.unlock();

	}

	public void thread2Methord() {
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		lock2.lock();
		try {
			Thread.sleep(200);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		lock1.lock();
		for (int i = 0; i < 10000; i++) {
			Accounts.transferMoney(act2, act1, ran.nextInt(1000));
		}
		lock1.unlock();
		lock2.unlock();

	}

	public void getFinalBalance() {
		System.out.println("Account1 balance : " + act1.getBalance());
		System.out.println("Account2 balance : " + act2.getBalance());
		System.out.println("Total Balance: " + (act1.getBalance() + act2.getBalance()));
	}
}
